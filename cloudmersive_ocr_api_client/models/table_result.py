# coding: utf-8

"""
    ocrapi

    The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudmersive_ocr_api_client.models.form_table_definition import FormTableDefinition  # noqa: F401,E501
from cloudmersive_ocr_api_client.models.table_row_result import TableRowResult  # noqa: F401,E501


class TableResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_definition': 'FormTableDefinition',
        'table_rows_result': 'list[TableRowResult]'
    }

    attribute_map = {
        'table_definition': 'TableDefinition',
        'table_rows_result': 'TableRowsResult'
    }

    def __init__(self, table_definition=None, table_rows_result=None):  # noqa: E501
        """TableResult - a model defined in Swagger"""  # noqa: E501

        self._table_definition = None
        self._table_rows_result = None
        self.discriminator = None

        if table_definition is not None:
            self.table_definition = table_definition
        if table_rows_result is not None:
            self.table_rows_result = table_rows_result

    @property
    def table_definition(self):
        """Gets the table_definition of this TableResult.  # noqa: E501

        The input table definition for reference  # noqa: E501

        :return: The table_definition of this TableResult.  # noqa: E501
        :rtype: FormTableDefinition
        """
        return self._table_definition

    @table_definition.setter
    def table_definition(self, table_definition):
        """Sets the table_definition of this TableResult.

        The input table definition for reference  # noqa: E501

        :param table_definition: The table_definition of this TableResult.  # noqa: E501
        :type: FormTableDefinition
        """

        self._table_definition = table_definition

    @property
    def table_rows_result(self):
        """Gets the table_rows_result of this TableResult.  # noqa: E501

        Rows of data in the table  # noqa: E501

        :return: The table_rows_result of this TableResult.  # noqa: E501
        :rtype: list[TableRowResult]
        """
        return self._table_rows_result

    @table_rows_result.setter
    def table_rows_result(self, table_rows_result):
        """Sets the table_rows_result of this TableResult.

        Rows of data in the table  # noqa: E501

        :param table_rows_result: The table_rows_result of this TableResult.  # noqa: E501
        :type: list[TableRowResult]
        """

        self._table_rows_result = table_rows_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
