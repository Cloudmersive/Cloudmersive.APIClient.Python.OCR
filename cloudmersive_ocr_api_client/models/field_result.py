# coding: utf-8

"""
    ocrapi

    The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FieldResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_field': 'FormFieldDefinition',
        'field_values': 'list[OcrPhotoTextElement]'
    }

    attribute_map = {
        'target_field': 'TargetField',
        'field_values': 'FieldValues'
    }

    def __init__(self, target_field=None, field_values=None):  # noqa: E501
        """FieldResult - a model defined in Swagger"""  # noqa: E501

        self._target_field = None
        self._field_values = None
        self.discriminator = None

        if target_field is not None:
            self.target_field = target_field
        if field_values is not None:
            self.field_values = field_values

    @property
    def target_field(self):
        """Gets the target_field of this FieldResult.  # noqa: E501

        Target field to extract from the form  # noqa: E501

        :return: The target_field of this FieldResult.  # noqa: E501
        :rtype: FormFieldDefinition
        """
        return self._target_field

    @target_field.setter
    def target_field(self, target_field):
        """Sets the target_field of this FieldResult.

        Target field to extract from the form  # noqa: E501

        :param target_field: The target_field of this FieldResult.  # noqa: E501
        :type: FormFieldDefinition
        """

        self._target_field = target_field

    @property
    def field_values(self):
        """Gets the field_values of this FieldResult.  # noqa: E501

        Result field value(s) extracted  # noqa: E501

        :return: The field_values of this FieldResult.  # noqa: E501
        :rtype: list[OcrPhotoTextElement]
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this FieldResult.

        Result field value(s) extracted  # noqa: E501

        :param field_values: The field_values of this FieldResult.  # noqa: E501
        :type: list[OcrPhotoTextElement]
        """

        self._field_values = field_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
